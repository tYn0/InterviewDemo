services:
  reverse-proxy:
    image: traefik:v3.1
    command:
      - --providers.docker
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.email={{ acme_email }}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/letsencrypt
    networks: [demo]

  backend:
    build: ./backend
    environment:
      - DATABASE_URL=postgresql://app:app@db:5432/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`{{ app_host }}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
    depends_on: [db]
    networks: [demo]

  static:
    build: ./static-site
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.static.rule=Host(`{{ static_host }}`)"
      - "traefik.http.routers.static.entrypoints=websecure"
      - "traefik.http.routers.static.tls.certresolver=myresolver"
      - "traefik.http.services.static.loadbalancer.server.port=80"
    networks: [demo]

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=app
    volumes:
      - dbdata:/var/lib/postgresql/data
    networks: [demo]

networks:
  demo:

volumes:
  dbdata: